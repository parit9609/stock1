apiVersion: apps/v1
kind: Deployment
metadata:
  name: stock-prediction
  namespace: ml-production
  labels:
    app: stock-prediction
    version: v1.0.0
    environment: production
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: stock-prediction
  template:
    metadata:
      labels:
        app: stock-prediction
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: stock-prediction-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: stock-prediction
        image: stock-prediction:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
        - containerPort: 8001
          name: metrics
        env:
        - name: STOCK_PREDICTION_CONFIG
          value: "/app/config/production_config.yaml"
        - name: MLFLOW_TRACKING_URI
          value: "http://mlflow-service:5000"
        - name: PYTHONPATH
          value: "/app"
        - name: LOG_LEVEL
          value: "INFO"
        - name: ENVIRONMENT
          value: "production"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: models-volume
          mountPath: /app/models
        - name: data-volume
          mountPath: /app/data
        - name: logs-volume
          mountPath: /app/logs
        - name: mlflow-volume
          mountPath: /app/mlflow
      volumes:
      - name: config-volume
        configMap:
          name: stock-prediction-config
      - name: models-volume
        persistentVolumeClaim:
          claimName: stock-prediction-models-pvc
      - name: data-volume
        persistentVolumeClaim:
          claimName: stock-prediction-data-pvc
      - name: logs-volume
        persistentVolumeClaim:
          claimName: stock-prediction-logs-pvc
      - name: mlflow-volume
        persistentVolumeClaim:
          claimName: stock-prediction-mlflow-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: stock-prediction-service
  namespace: ml-production
  labels:
    app: stock-prediction
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http
  - port: 8001
    targetPort: 8001
    protocol: TCP
    name: metrics
  selector:
    app: stock-prediction
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: stock-prediction-ingress
  namespace: ml-production
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - api.stockprediction.com
    secretName: stock-prediction-tls
  rules:
  - host: api.stockprediction.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: stock-prediction-service
            port:
              number: 80
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: stock-prediction-config
  namespace: ml-production
data:
  production_config.yaml: |
    # Production configuration
    app:
      name: "Stock Market Prediction"
      environment: "production"
      debug: false
      log_level: "INFO"
    
    cross_validation:
      n_splits: 5
      test_size: null
      gap: 0
      shuffle: false
    
    lightgbm:
      n_estimators: 200
      early_stopping_rounds: 50
      n_jobs: -1
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: stock-prediction-models-pvc
  namespace: ml-production
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: gp2
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: stock-prediction-data-pvc
  namespace: ml-production
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 20Gi
  storageClassName: gp2
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: stock-prediction-logs-pvc
  namespace: ml-production
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
  storageClassName: gp2
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: stock-prediction-mlflow-pvc
  namespace: ml-production
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: gp2
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: stock-prediction-sa
  namespace: ml-production
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: stock-prediction-role
  namespace: ml-production
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints", "persistentvolumeclaims"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: stock-prediction-rolebinding
  namespace: ml-production
subjects:
- kind: ServiceAccount
  name: stock-prediction-sa
  namespace: ml-production
roleRef:
  kind: Role
  name: stock-prediction-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: stock-prediction-hpa
  namespace: ml-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: stock-prediction
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
